/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import com.mysql.jdbc.*;
import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.sql.*;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Connection;
import java.sql.PreparedStatement;

/**
 *
 * @author Iliyas
 */
public class PassengerManagement extends javax.swing.JFrame {
    Connection conn= null;
    PreparedStatement ps=null;
    ResultSet rs=null;
    /**
     * Creates new form PassengerManagement
     */
       int dialogResult = 0;
     int dialogButton = JOptionPane.YES_NO_OPTION;
    String fname,mname,lname,mobnostring,city,email,gender,agestring,idstring,altnostring;
    int id,mobno,age,altno;
     String Vemail = "^[A-Za-z0-9+_.-]+@(.+)$";
       String Vname="[a-zA-Z]*";
       String Vno="[0-9]*";
       String Vbusno = "^[A-Z]{2}[ -][0-9]{1,2}(?: [A-Z])?(?: [A-Z]*)? [0-9]{4}$";
    
      public void groupButton( ) 
       {
        ButtonGroup bg = new ButtonGroup( );
        bg.add(MaleRadio);
        bg.add(FemaleRadio);
        bg.add(HiddenRadio);

        }
       
    public PassengerManagement() {
        initComponents();
        groupButton();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        Lname = new javax.swing.JTextField();
        PassengerID = new javax.swing.JTextField();
        MobileNo = new javax.swing.JTextField();
        Age = new javax.swing.JTextField();
        MaleRadio = new javax.swing.JRadioButton();
        FemaleRadio = new javax.swing.JRadioButton();
        City = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        AddButton = new javax.swing.JButton();
        ModifyButton = new javax.swing.JButton();
        DeleteButton = new javax.swing.JButton();
        DisplayButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        Fname = new javax.swing.JTextField();
        Mname = new javax.swing.JTextField();
        AltNo = new javax.swing.JTextField();
        Email = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        HeadLabel = new javax.swing.JLabel();
        BackButton = new javax.swing.JButton();
        viewdetailsbuttonfield = new javax.swing.JToggleButton();
        Background = new javax.swing.JLabel();
        HiddenRadio = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Bus Booking::Passenger Management");
        setMinimumSize(new java.awt.Dimension(1080, 720));
        setResizable(false);
        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Last Name :");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(280, 300, 130, 30);

        Lname.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        Lname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                LnameKeyTyped(evt);
            }
        });
        getContentPane().add(Lname);
        Lname.setBounds(440, 300, 190, 30);

        PassengerID.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        PassengerID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                PassengerIDKeyTyped(evt);
            }
        });
        getContentPane().add(PassengerID);
        PassengerID.setBounds(440, 150, 140, 30);

        MobileNo.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        MobileNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                MobileNoKeyTyped(evt);
            }
        });
        getContentPane().add(MobileNo);
        MobileNo.setBounds(440, 480, 140, 30);

        Age.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        Age.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AgeActionPerformed(evt);
            }
        });
        Age.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                AgeKeyTyped(evt);
            }
        });
        getContentPane().add(Age);
        Age.setBounds(440, 380, 190, 30);

        MaleRadio.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 14)); // NOI18N
        MaleRadio.setForeground(new java.awt.Color(255, 255, 255));
        MaleRadio.setText("Male");
        getContentPane().add(MaleRadio);
        MaleRadio.setBounds(440, 340, 80, 25);
        MaleRadio.getAccessibleContext().setAccessibleDescription("");

        FemaleRadio.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 14)); // NOI18N
        FemaleRadio.setForeground(new java.awt.Color(255, 255, 255));
        FemaleRadio.setText("Female");
        getContentPane().add(FemaleRadio);
        FemaleRadio.setBounds(540, 340, 100, 30);

        City.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        City.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                CityKeyTyped(evt);
            }
        });
        getContentPane().add(City);
        City.setBounds(440, 430, 190, 30);

        jLabel2.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("ID :");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(360, 150, 40, 30);

        jLabel3.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Gender :");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(310, 340, 100, 30);

        jLabel4.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Mobile No :");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(280, 480, 110, 30);

        jLabel5.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Age :");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(340, 380, 60, 30);

        jLabel6.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("City :");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(340, 430, 60, 20);

        AddButton.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 18)); // NOI18N
        AddButton.setText("ADD");
        AddButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        AddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddButtonActionPerformed(evt);
            }
        });
        getContentPane().add(AddButton);
        AddButton.setBounds(240, 590, 120, 40);

        ModifyButton.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 18)); // NOI18N
        ModifyButton.setText("UPDATE");
        ModifyButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        ModifyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModifyButtonActionPerformed(evt);
            }
        });
        getContentPane().add(ModifyButton);
        ModifyButton.setBounds(390, 590, 130, 40);

        DeleteButton.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 18)); // NOI18N
        DeleteButton.setText("DELETE");
        DeleteButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        DeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteButtonActionPerformed(evt);
            }
        });
        getContentPane().add(DeleteButton);
        DeleteButton.setBounds(720, 590, 130, 40);

        DisplayButton.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 18)); // NOI18N
        DisplayButton.setText("DISPLAY");
        DisplayButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        DisplayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DisplayButtonActionPerformed(evt);
            }
        });
        getContentPane().add(DisplayButton);
        DisplayButton.setBounds(550, 590, 130, 40);

        jLabel7.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("First Name :");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(280, 200, 130, 30);

        jLabel8.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Middle Name :");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(260, 250, 160, 30);

        jLabel11.setFont(new java.awt.Font("Bauhaus 93", 1, 36)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 0, 0));
        jLabel11.setText("PASSENGER MANAGEMENT");
        getContentPane().add(jLabel11);
        jLabel11.setBounds(290, 70, 490, 54);

        Fname.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        Fname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                FnameKeyTyped(evt);
            }
        });
        getContentPane().add(Fname);
        Fname.setBounds(440, 200, 190, 30);

        Mname.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        Mname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MnameActionPerformed(evt);
            }
        });
        Mname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                MnameKeyTyped(evt);
            }
        });
        getContentPane().add(Mname);
        Mname.setBounds(440, 250, 190, 30);

        AltNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AltNoActionPerformed(evt);
            }
        });
        AltNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                AltNoKeyTyped(evt);
            }
        });
        getContentPane().add(AltNo);
        AltNo.setBounds(740, 480, 130, 30);

        Email.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        getContentPane().add(Email);
        Email.setBounds(440, 530, 190, 30);

        jLabel10.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Alternate No:");
        getContentPane().add(jLabel10);
        jLabel10.setBounds(590, 480, 140, 30);

        jLabel9.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("E-Mail :");
        getContentPane().add(jLabel9);
        jLabel9.setBounds(320, 530, 80, 30);

        HeadLabel.setBackground(new java.awt.Color(0, 0, 0));
        HeadLabel.setFont(new java.awt.Font("Arial Rounded MT Bold", 3, 36)); // NOI18N
        HeadLabel.setForeground(new java.awt.Color(204, 255, 0));
        HeadLabel.setText("                        BUS RESERVATION SYSTEM");
        HeadLabel.setOpaque(true);
        getContentPane().add(HeadLabel);
        HeadLabel.setBounds(0, 0, 1080, 40);

        BackButton.setBackground(new java.awt.Color(255, 255, 0));
        BackButton.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 18)); // NOI18N
        BackButton.setText("<< BACK");
        BackButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        BackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackButtonActionPerformed(evt);
            }
        });
        getContentPane().add(BackButton);
        BackButton.setBounds(50, 50, 130, 60);

        viewdetailsbuttonfield.setText("VIEW DETAILS");
        viewdetailsbuttonfield.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        viewdetailsbuttonfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewdetailsbuttonfieldActionPerformed(evt);
            }
        });
        getContentPane().add(viewdetailsbuttonfield);
        viewdetailsbuttonfield.setBounds(610, 150, 110, 30);

        Background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/background.jpg"))); // NOI18N
        Background.setAlignmentY(0.0F);
        Background.setName("background"); // NOI18N
        getContentPane().add(Background);
        Background.setBounds(0, 0, 1080, 720);

        HiddenRadio.setText("jRadioButton1");
        getContentPane().add(HiddenRadio);
        HiddenRadio.setBounds(0, 0, 93, 23);

        pack();
    }// </editor-fold>//GEN-END:initComponents
           
    private void AddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddButtonActionPerformed
        conn = MysqlConnect.connectDB();
       this.idstring = PassengerID.getText();
        this.fname = Fname.getText();
        this.mname = Mname.getText();
        this.lname = Lname.getText();
       this.agestring = Age.getText();
        this.city = City.getText();
        this.email = Email.getText();
       mobnostring = MobileNo.getText();
       altnostring=AltNo.getText();

  
       
 
        
           //validation
        if (idstring.isEmpty())
    {
        JOptionPane.showMessageDialog(this,"ID field cannot be empty!","Alert",JOptionPane.WARNING_MESSAGE);
    return;
    }
        else if (!idstring.matches(Vno))
        {
            JOptionPane.showMessageDialog(this,"ID field should contain only numbers!","Alert",JOptionPane.WARNING_MESSAGE);
        }
    else if (fname.isEmpty()||(!fname.matches(Vname)))
    {
        JOptionPane.showMessageDialog(this,"First Name cannot be empty and should contain only letters!!","Alert",JOptionPane.WARNING_MESSAGE);
    return;
    }
    else if (mname.isEmpty()||(!mname.matches(Vname)))
    {
        JOptionPane.showMessageDialog(this,"Middle Name cannot be empty and should contain only letters!!!","Alert",JOptionPane.WARNING_MESSAGE);
    return;
    }
    
    else if (lname.isEmpty()||(!lname.matches(Vname)))
    {
        JOptionPane.showMessageDialog(this,"last Name cannot be empty and should contain only letters!!!","Alert",JOptionPane.WARNING_MESSAGE);
    return;
    }
    
        if(MaleRadio.isSelected())
      {
                gender = "M";
                
      } 
            
       if(FemaleRadio.isSelected())
        {
            gender = "F";
        }
       if((!MaleRadio.isSelected())&&(!FemaleRadio.isSelected()))
     {
         JOptionPane.showMessageDialog(this,"Select Gender!","Alert",JOptionPane.WARNING_MESSAGE);
         return;
     }
    
//   
  else if (agestring.isEmpty()||(!agestring.matches(Vno)))
    {
        JOptionPane.showMessageDialog(this,"Age cannot be empty and should contain only numbers!","Alert",JOptionPane.WARNING_MESSAGE);
    return;
    }
     else if ("0".equals(Age.getText())||(Age.getText().length()>2))
    {
        JOptionPane.showMessageDialog(this,"Enter Age in between 0 to 100 !!","Alert",JOptionPane.WARNING_MESSAGE);
        return;
    }
    else if (city.isEmpty()||(!city.matches(Vname)))
    {
        JOptionPane.showMessageDialog(this,"City Name cannot be empty and should contain only letters!!!","Alert",JOptionPane.WARNING_MESSAGE);
    return;
    }       
      
      else if (mobnostring.isEmpty())
    {
        JOptionPane.showMessageDialog(this,"Enter Mobile Number!","Alert",JOptionPane.WARNING_MESSAGE);
    return;
    }
      else if ((mobnostring.length()!=10)||(!mobnostring.matches(Vno)))
    {
        JOptionPane.showMessageDialog(this,"Mobile Number should contain 10 digits and only Numbers","Alert",JOptionPane.WARNING_MESSAGE);
    return;
    }
        
    foo: {  
          if(!(AltNo.getText().isEmpty())) 
              {
                  
           if ((AltNo.getText().length()!=10)||!(AltNo.getText().matches(Vno)))
           {
                  JOptionPane.showMessageDialog(this,"Alternate Mobile Number should contain 10 digits and only Numbers","Alert",JOptionPane.WARNING_MESSAGE);
                return;
            }
        else
           {
               break foo;
           }
              }
       }

//      else if ((altnostring.isEmpty()))
//           
//       {
//           JOptionPane.showMessageDialog(this,"Enter Alternate Number !!","Alert",JOptionPane.WARNING_MESSAGE);
//                return;
//       }
// 
//      else if ((altnostring.length()!=10)||!(altnostring.matches(Vno)))
//             
//      {
//                  JOptionPane.showMessageDialog(this,"Alternate Mobile Number should contain 10 digits and only Numbers","Alert",JOptionPane.WARNING_MESSAGE);
//                return;
//                }


        if (email.isEmpty())
    {
        JOptionPane.showMessageDialog(this,"Enter Email!","Alert",JOptionPane.WARNING_MESSAGE);
    return;
    }
          else if (!email.matches(Vemail))
    {
        JOptionPane.showMessageDialog(this,"Enter correct Email!","Alert",JOptionPane.WARNING_MESSAGE);
    return;
    }    
        
    else    
              //addbutton://label1
    {     
       dialogResult = JOptionPane.showConfirmDialog (null, "Would You Like to Save the Passenger details","Warning",dialogButton);
        if(dialogResult == JOptionPane.YES_OPTION)
        {
  // Saving code here

              try
              {     
                     id= Integer.parseInt(idstring);
                    //mobno= Integer.parseInt(mobnostring);
                        age = Integer.parseInt(agestring);


                    String sql= "INSERT INTO passenger VALUES(?,?,?,?,?,?,?,?)";
                    ps=conn.prepareStatement(sql);        
                    ps.setInt(1,id);
                    ps.setString(2,fname);
                    ps.setString(3,mname);
                    ps.setString(4,lname);
                    ps.setString(5,gender);
                    ps.setInt(6,age);
                   // ps.setString(7,mobnostring);
                    ps.setString(7,email);
                    ps.setString(8,city);   
                    ps.execute();
                    {
                        try {
                            String sqlb = "INSERT INTO alt_mobno VALUES(?,?)";
                            ps = conn.prepareStatement(sqlb);
                            ps.setInt(1, id);
                            ps.setString(2, mobnostring);
                            ps.execute();
                            }
                        catch (Exception e) 
                            {
                                JOptionPane.showMessageDialog(null,"Alternate Mobile Number Error");
                             }
                        JOptionPane.showMessageDialog(null,"Passenger Added Successfully");
                        PassengerID.setText(null);                        
                        Fname.setText(null);
                        Mname.setText(null);
                        Lname.setText(null);
                        Age.setText(null);
                        City.setText(null);
                        MobileNo.setText(null);
                        Email.setText(null);
                        HiddenRadio.setSelected(true);
                        
                    }
                    if(!(AltNo.getText().isEmpty())) 
                    {
                     try
                        {
                        String sqla= "INSERT INTO alt_mobno (id,Alt_No) VALUES(?,?)";
                        ps=conn.prepareStatement(sqla);        
                        ps.setInt(1,id);
                        ps.setString(2,altnostring);
                        ps.execute();
                        {
                            AltNo.setText(null);
                        }
                        }
                        catch(Exception e)
                        {
                          JOptionPane.showMessageDialog(this,"Alternate number error "+e,"Alert",JOptionPane.WARNING_MESSAGE);
                        //break addbutton;
                        }
                     
                    }
              }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(this,"Passenger ID already Exist !!  ","Alert",JOptionPane.WARNING_MESSAGE);
                        }
            }      
       
        }    
        // TODO add your handling code here:
    }//GEN-LAST:event_AddButtonActionPerformed

    private void BackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackButtonActionPerformed

        new Choice().setVisible(true);
        this.setVisible(false);
        // TODO add your handling code here:
    }//GEN-LAST:event_BackButtonActionPerformed

    private void MnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MnameActionPerformed

    private void AgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AgeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AgeActionPerformed

    private void DisplayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DisplayButtonActionPerformed
        this.setVisible(false);
        new DisplayPassenger().setVisible(true);

    }//GEN-LAST:event_DisplayButtonActionPerformed
        
    private void viewdetailsbuttonfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewdetailsbuttonfieldActionPerformed
        // TODO add your handling code here:
          
      conn = MysqlConnect.connectDB();

     //Integer gid = Integer.parseInt(PassengerID.getText());
     if (PassengerID.getText().isEmpty())
     {
         JOptionPane.showMessageDialog(this,"Enter Passeneger ID ","Alert",JOptionPane.WARNING_MESSAGE);
     }
     else
        try
        {
            //String gid = PassengerID.getText();
           // ps = conn.prepareStatement("select * from Passenger where id = 1 ");
            //ps.setString(1,1);
            //String sql = "SELECT * FROM passenger WHERE id = ? ";
            String id=PassengerID.getText();
            Integer gid = Integer.parseInt(PassengerID.getText());
            ps=conn.prepareStatement("SELECT * FROM passenger WHERE id = ?");        
            ps.setInt(1,gid);
            rs = ps.executeQuery();        
            if(rs.next())
            {   
            Fname.setText(rs.getString(2));
            Mname.setText(rs.getString(3));
            Lname.setText(rs.getString(4));
            String gendercheck = rs.getString(5);
            Age.setText(rs.getString(6));
            City.setText(rs.getString(8));
            Email.setText(rs.getString(7));
            //MobileNo.setText(rs.getString(7));        
            if(gendercheck.equals("M"))
            {

                MaleRadio.setSelected(true);

            } 
            else
            {
                FemaleRadio.setSelected(true);
            }
            try
                {
                    ps=conn.prepareStatement("SELECT * from alt_mobno where id = ? limit 1");        
                    ps.setString(1,id);
                    rs = ps.executeQuery();
                    if(rs.next())
                    {
                       MobileNo.setText(rs.getString("Alt_no"));
                    }
                }
            catch(Exception e)                    
            {
                JOptionPane.showMessageDialog(null,"Alternate Number Error", "Error", JOptionPane.ERROR_MESSAGE);
            }
            
            
            try
                {
                    ps=conn.prepareStatement("SELECT * from alt_mobno where id = ? limit 1,1");        
                    ps.setString(1,id);
                    rs = ps.executeQuery();
                    if(rs.next())
                    {
                        AltNo.setText(rs.getString("Alt_No"));
                    }
                    else
                    {
                        AltNo.setText("");
                    }
                }
            catch(Exception e)                    
            {
                JOptionPane.showMessageDialog(null,"Alternate Number Error", "Error", JOptionPane.ERROR_MESSAGE);
            }
            
            }
            else
            {
                JOptionPane.showMessageDialog(null,"Passenger Details not found !!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
            
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null,"Error in Processing", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_viewdetailsbuttonfieldActionPerformed

    private void DeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteButtonActionPerformed
      
        conn = MysqlConnect.connectDB();
        int pid = 0;
        
        idstring= PassengerID.getText();
        agestring=Age.getText();
        fname = Fname.getText();
        mname = Mname.getText();
        lname = Lname.getText();
        
        city = City.getText();
        email = Email.getText();
        mobnostring = MobileNo.getText();
        altnostring = AltNo.getText(); 
  if (PassengerID.getText().isEmpty())
     {
         JOptionPane.showMessageDialog(this,"Enter Passeneger ID ","Alert",JOptionPane.WARNING_MESSAGE);
     }
     else
  {  
      try
        {
            //String gid = PassengerID.getText();
           // ps = conn.prepareStatement("select * from Passenger where id = 1 ");
            //ps.setString(1,1);
            //String sql = "SELECT * FROM passenger WHERE id = ? ";
            Integer gid = Integer.parseInt(PassengerID.getText());
            ps=conn.prepareStatement("SELECT * FROM passenger WHERE id = ?");        
            ps.setInt(1,gid);
            rs = ps.executeQuery();        
            if(rs.next())
            {   
              dialogResult = JOptionPane.showConfirmDialog (null, "Are you sure to delete passenger details ?","Warning",dialogButton);
                if(dialogResult == JOptionPane.YES_OPTION)
                  try
                {  
            String sql = "DELETE FROM passenger WHERE id = ? ";
            ps=conn.prepareStatement(sql);        
            ps.setString(1,PassengerID.getText());
            ps.execute();
            JOptionPane.showMessageDialog(null,"Passenger details Deleted Successfuly", "Error", JOptionPane.ERROR_MESSAGE);
            PassengerID.setText(null);                        
                Fname.setText(null);
                Mname.setText(null);
                Lname.setText(null);
                Age.setText(null);
                City.setText(null);
                MobileNo.setText(null);
                Email.setText(null);
                HiddenRadio.setSelected(true);
                AltNo.setText(null);
                }
        
      catch(Exception e)
                {
               JOptionPane.showMessageDialog(null, "Passenger Details not found", "Error", JOptionPane.ERROR_MESSAGE);
                }
                }
                else
                    {
                JOptionPane.showMessageDialog(null,"Passenger Details Not Found", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }

            
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null,"Error in Processing", "Error", JOptionPane.ERROR_MESSAGE);
        }
// TODO add your handling code here:
    }//GEN-LAST:event_DeleteButtonActionPerformed
    }
    private void ModifyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModifyButtonActionPerformed
    
     
         idstring= PassengerID.getText();
        agestring=Age.getText();
        fname = Fname.getText();
        mname = Mname.getText();
        lname = Lname.getText();
        
        city = City.getText();
        email = Email.getText();
        mobnostring = MobileNo.getText();
        altnostring = AltNo.getText();
        
        
           //validation
        if (idstring.isEmpty())
    {
        JOptionPane.showMessageDialog(this,"ID field cannot be empty!","Alert",JOptionPane.WARNING_MESSAGE);
    return;
    }
        else if (!idstring.matches(Vno))
        {
            JOptionPane.showMessageDialog(this,"ID field should contain only numbers!","Alert",JOptionPane.WARNING_MESSAGE);
        }
    else if (fname.isEmpty()||(!fname.matches(Vname)))
    {
        JOptionPane.showMessageDialog(this,"First Name cannot be empty and should contain only letters!!","Alert",JOptionPane.WARNING_MESSAGE);
    return;
    }
    else if (mname.isEmpty()||(!mname.matches(Vname)))
    {
        JOptionPane.showMessageDialog(this,"Middle Name cannot be empty and should contain only letters!!!","Alert",JOptionPane.WARNING_MESSAGE);
    return;
    }
    
    else if (lname.isEmpty()||(!lname.matches(Vname)))
    {
        JOptionPane.showMessageDialog(this,"last Name cannot be empty and should contain only letters!!!","Alert",JOptionPane.WARNING_MESSAGE);
    return;
    }
    
        if(MaleRadio.isSelected())
      {
                gender = "M";
                
      } 
            
       if(FemaleRadio.isSelected())
        {
            gender = "F";
        }
       if((!MaleRadio.isSelected())&&(!FemaleRadio.isSelected()))
     {
         JOptionPane.showMessageDialog(this,"Select Gender!","Alert",JOptionPane.WARNING_MESSAGE);
         return;
     }
    
//   
  else if (agestring.isEmpty()||(!agestring.matches(Vno)))
    {
        JOptionPane.showMessageDialog(this,"Age cannot be empty and should contain only numbers!","Alert",JOptionPane.WARNING_MESSAGE);
    return;
    }
     else if ("0".equals(Age.getText())||(Age.getText().length()>2))
    {
        JOptionPane.showMessageDialog(this,"Enter Age between 0 to 100 !!","Alert",JOptionPane.WARNING_MESSAGE);
        return;
    }
    else if (city.isEmpty()||(!city.matches(Vname)))
    {
        JOptionPane.showMessageDialog(this,"City Name cannot be empty and should contain only letters!!!","Alert",JOptionPane.WARNING_MESSAGE);
    return;
    }       
      
      else if (mobnostring.isEmpty())
    {
        JOptionPane.showMessageDialog(this,"Enter Mobile Number!","Alert",JOptionPane.WARNING_MESSAGE);
    return;
    }
      else if ((mobnostring.length()!=10)||(!mobnostring.matches(Vno)))
    {
        JOptionPane.showMessageDialog(this,"Mobile Number should contain 10 digits and only Numbers","Alert",JOptionPane.WARNING_MESSAGE);
    return;
    }
        
      
foo: {  
          if(!(AltNo.getText().isEmpty())) 
              {
                  
           if ((AltNo.getText().length()!=10)||!(AltNo.getText().matches(Vno)))
           {
                  JOptionPane.showMessageDialog(this,"Alternate Mobile Number should contain 10 digits and only Numbers","Alert",JOptionPane.WARNING_MESSAGE);
                return;
            }
        else
           {
               break foo;
           }
              }
       }

  if (email.isEmpty())
    {
        JOptionPane.showMessageDialog(this,"Enter Email!","Alert",JOptionPane.WARNING_MESSAGE);
    return;
    }
          else if (!email.matches(Vemail))
    {
        JOptionPane.showMessageDialog(this,"Enter correct Email!","Alert",JOptionPane.WARNING_MESSAGE);
    return;
    }    
        
    

     else
  {  
      try
        {
            //String gid = PassengerID.getText();
           // ps = conn.prepareStatement("select * from Passenger where id = 1 ");
            //ps.setString(1,1);
            //String sql = "SELECT * FROM passenger WHERE id = ? ";
            Integer gid = Integer.parseInt(PassengerID.getText());
            ps=conn.prepareStatement("SELECT * FROM passenger WHERE id = ?");        
            ps.setInt(1,gid);
            rs = ps.executeQuery();        
            if(rs.next())
            {   
              dialogResult = JOptionPane.showConfirmDialog (null, "Are you sure to delete passenger details ?","Warning",dialogButton);
                if(dialogResult == JOptionPane.YES_OPTION)
            try
                {     
            
            age = Integer.parseInt(Age.getText());
            id = Integer.parseInt(PassengerID.getText());
            String sql= "UPDATE passenger SET fname = ?, mname = ?,lname = ?,gender = ?,age= ?,email = ?,city=? where id =?";
            ps=conn.prepareStatement(sql);        
            ps.setInt(8,id);
            ps.setString(1,fname);
            ps.setString(2,mname);
            ps.setString(3,lname);
            ps.setString(4,gender);
            ps.setInt(5,age);
            //ps.setString(6,mobnostring);
            ps.setString(6,email);
            ps.setString(7,city);
            
            ps.execute();
                     {
                         try
                         {
                                               
                                  String sqla= "Update alt_mobno set alt_no=? where id = ? limit 1";
                                  ps=conn.prepareStatement(sqla);        
                                  ps.setInt(2,id);
                                  ps.setString(1,mobnostring);
                                  ps.execute();
                                
                         }
                         catch(Exception e)
                         {
                         }
                         
                JOptionPane.showMessageDialog(null,"Passenger details Updated Successfully");
                
                PassengerID.setText(null);                        
                Fname.setText(null);
                Mname.setText(null);
                Lname.setText(null);
                Age.setText(null);
                City.setText(null);
                MobileNo.setText(null);
                Email.setText(null);
                HiddenRadio.setSelected(true);
                        }
                   
//                if(!AltNo.getText().isEmpty())
//                        {
//                        try
//                            {
//                        
//                        String sqla= "Update alt_mobno set alt_no=? where id = ?";
//                        ps=conn.prepareStatement(sqla);        
//                        ps.setInt(2,id);
//                        ps.setString(1,altnostring);
//                        ps.execute();
//                                {   
//                            AltNo.setText(null);
//                                }
//                            }
//                        catch(Exception e)
//                            {
//                            JOptionPane.showMessageDialog(this,"Alternate number error "+e,"Alert",JOptionPane.WARNING_MESSAGE);
//                        //break addbutton;
//                             }
//                        }
                AltNo.setText(null);
                }
        catch(Exception e)
                {
                    JOptionPane.showMessageDialog(this,"Cannot Update Please try again "+e,"Alert",JOptionPane.WARNING_MESSAGE);
                }
            }
             else
            {
                JOptionPane.showMessageDialog(null,"Passenger Details Not Found.Check Passenger ID before updating ", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
            catch(Exception e)
                {
                    JOptionPane.showMessageDialog(this,"Cannot Update Please try again "+e,"Alert",JOptionPane.WARNING_MESSAGE);
                }
            
        
      }
// TODO add your handling code here:
    }//GEN-LAST:event_ModifyButtonActionPerformed

    private void PassengerIDKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PassengerIDKeyTyped
    
        char vChar = evt.getKeyChar();
                    if (!(Character.isDigit(vChar)
                            || (vChar == KeyEvent.VK_BACK_SPACE)
                            || (vChar == KeyEvent.VK_DELETE))) {
                        evt.consume();
                    }
// TODO add your handling code here:
    }//GEN-LAST:event_PassengerIDKeyTyped

    private void AgeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_AgeKeyTyped
        
        char vChar = evt.getKeyChar();
                    if (!(Character.isDigit(vChar)
                            || (vChar == KeyEvent.VK_BACK_SPACE)
                            || (vChar == KeyEvent.VK_DELETE))) {
                        evt.consume();
                    }
// TODO add your handling code here:
    }//GEN-LAST:event_AgeKeyTyped

    private void MobileNoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_MobileNoKeyTyped
       
        char vChar = evt.getKeyChar();
                    if (!(Character.isDigit(vChar)
                            || (vChar == KeyEvent.VK_BACK_SPACE)
                            || (vChar == KeyEvent.VK_DELETE))) {
                        evt.consume();
                    }
        // TODO add your handling code here:
    }//GEN-LAST:event_MobileNoKeyTyped

    private void AltNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AltNoActionPerformed
       
    
        
// TODO add your handling code here:
    }//GEN-LAST:event_AltNoActionPerformed

    private void AltNoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_AltNoKeyTyped
       char vChar = evt.getKeyChar();
                    if (!(Character.isDigit(vChar)
                            || (vChar == KeyEvent.VK_BACK_SPACE)
                            || (vChar == KeyEvent.VK_DELETE))) {
                        evt.consume();
                    }
        // TODO add your handling code here:
    }//GEN-LAST:event_AltNoKeyTyped

    private void FnameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FnameKeyTyped
      
        char vChar = evt.getKeyChar();
                    if ((Character.isDigit(vChar)
                            || (vChar == KeyEvent.VK_BACK_SPACE)
                            || (vChar == KeyEvent.VK_DELETE))) {
                        evt.consume();
                    }
                    char keyChar = evt.getKeyChar();
    if (Character.isLowerCase(keyChar)) {
      evt.setKeyChar(Character.toUpperCase(keyChar));
    }
                        
        // TODO add your handling code here:
    }//GEN-LAST:event_FnameKeyTyped

    private void MnameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_MnameKeyTyped
       char vChar = evt.getKeyChar();
                    if ((Character.isDigit(vChar)
                            || (vChar == KeyEvent.VK_BACK_SPACE)
                            || (vChar == KeyEvent.VK_DELETE))) {
                        evt.consume();
                    }
                    char keyChar = evt.getKeyChar();
    if (Character.isLowerCase(keyChar)) {
      evt.setKeyChar(Character.toUpperCase(keyChar));
    }
        // TODO add your handling code here:
    }//GEN-LAST:event_MnameKeyTyped

    private void LnameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_LnameKeyTyped
      
    char vChar = evt.getKeyChar();
                    if ((Character.isDigit(vChar)
                            || (vChar == KeyEvent.VK_BACK_SPACE)
                            || (vChar == KeyEvent.VK_DELETE))) {
                        evt.consume();
                    }
                    char keyChar = evt.getKeyChar();
    if (Character.isLowerCase(keyChar)) {
      evt.setKeyChar(Character.toUpperCase(keyChar));
    }
// TODO add your handling code here:
    }//GEN-LAST:event_LnameKeyTyped

    private void CityKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CityKeyTyped
        
        char vChar = evt.getKeyChar();
                    if ((Character.isDigit(vChar)
                            || (vChar == KeyEvent.VK_BACK_SPACE)
                            || (vChar == KeyEvent.VK_DELETE))) {
                        evt.consume();
                    }
                    
                    char keyChar = evt.getKeyChar();
    if (Character.isLowerCase(keyChar)) {
      evt.setKeyChar(Character.toUpperCase(keyChar));
    }
// TODO add your handling code here:
    }//GEN-LAST:event_CityKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PassengerManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PassengerManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PassengerManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PassengerManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PassengerManagement().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddButton;
    private javax.swing.JTextField Age;
    private javax.swing.JTextField AltNo;
    private javax.swing.JButton BackButton;
    private javax.swing.JLabel Background;
    private javax.swing.JTextField City;
    private javax.swing.JButton DeleteButton;
    private javax.swing.JButton DisplayButton;
    private javax.swing.JTextField Email;
    private javax.swing.JRadioButton FemaleRadio;
    private javax.swing.JTextField Fname;
    private javax.swing.JLabel HeadLabel;
    private javax.swing.JRadioButton HiddenRadio;
    private javax.swing.JTextField Lname;
    private javax.swing.JRadioButton MaleRadio;
    private javax.swing.JTextField Mname;
    private javax.swing.JTextField MobileNo;
    private javax.swing.JButton ModifyButton;
    private javax.swing.JTextField PassengerID;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JToggleButton viewdetailsbuttonfield;
    // End of variables declaration//GEN-END:variables
}
